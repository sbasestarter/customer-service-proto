// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/customer_talk_service.proto

package customertalkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerTalkServiceClient is the client API for CustomerTalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerTalkServiceClient interface {
	QueryTalks(ctx context.Context, in *QueryTalksRequest, opts ...grpc.CallOption) (*QueryTalksResponse, error)
	Talk(ctx context.Context, opts ...grpc.CallOption) (CustomerTalkService_TalkClient, error)
}

type customerTalkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerTalkServiceClient(cc grpc.ClientConnInterface) CustomerTalkServiceClient {
	return &customerTalkServiceClient{cc}
}

func (c *customerTalkServiceClient) QueryTalks(ctx context.Context, in *QueryTalksRequest, opts ...grpc.CallOption) (*QueryTalksResponse, error) {
	out := new(QueryTalksResponse)
	err := c.cc.Invoke(ctx, "/CustomerTalkService/QueryTalks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerTalkServiceClient) Talk(ctx context.Context, opts ...grpc.CallOption) (CustomerTalkService_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomerTalkService_ServiceDesc.Streams[0], "/CustomerTalkService/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerTalkServiceTalkClient{stream}
	return x, nil
}

type CustomerTalkService_TalkClient interface {
	Send(*TalkRequest) error
	Recv() (*TalkResponse, error)
	grpc.ClientStream
}

type customerTalkServiceTalkClient struct {
	grpc.ClientStream
}

func (x *customerTalkServiceTalkClient) Send(m *TalkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customerTalkServiceTalkClient) Recv() (*TalkResponse, error) {
	m := new(TalkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerTalkServiceServer is the server API for CustomerTalkService service.
// All implementations must embed UnimplementedCustomerTalkServiceServer
// for forward compatibility
type CustomerTalkServiceServer interface {
	QueryTalks(context.Context, *QueryTalksRequest) (*QueryTalksResponse, error)
	Talk(CustomerTalkService_TalkServer) error
	mustEmbedUnimplementedCustomerTalkServiceServer()
}

// UnimplementedCustomerTalkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerTalkServiceServer struct {
}

func (UnimplementedCustomerTalkServiceServer) QueryTalks(context.Context, *QueryTalksRequest) (*QueryTalksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTalks not implemented")
}
func (UnimplementedCustomerTalkServiceServer) Talk(CustomerTalkService_TalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (UnimplementedCustomerTalkServiceServer) mustEmbedUnimplementedCustomerTalkServiceServer() {}

// UnsafeCustomerTalkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerTalkServiceServer will
// result in compilation errors.
type UnsafeCustomerTalkServiceServer interface {
	mustEmbedUnimplementedCustomerTalkServiceServer()
}

func RegisterCustomerTalkServiceServer(s grpc.ServiceRegistrar, srv CustomerTalkServiceServer) {
	s.RegisterService(&CustomerTalkService_ServiceDesc, srv)
}

func _CustomerTalkService_QueryTalks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTalksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerTalkServiceServer).QueryTalks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerTalkService/QueryTalks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerTalkServiceServer).QueryTalks(ctx, req.(*QueryTalksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerTalkService_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomerTalkServiceServer).Talk(&customerTalkServiceTalkServer{stream})
}

type CustomerTalkService_TalkServer interface {
	Send(*TalkResponse) error
	Recv() (*TalkRequest, error)
	grpc.ServerStream
}

type customerTalkServiceTalkServer struct {
	grpc.ServerStream
}

func (x *customerTalkServiceTalkServer) Send(m *TalkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customerTalkServiceTalkServer) Recv() (*TalkRequest, error) {
	m := new(TalkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerTalkService_ServiceDesc is the grpc.ServiceDesc for CustomerTalkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerTalkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerTalkService",
	HandlerType: (*CustomerTalkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTalks",
			Handler:    _CustomerTalkService_QueryTalks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _CustomerTalkService_Talk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/customer_talk_service.proto",
}
