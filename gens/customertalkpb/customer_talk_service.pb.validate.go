// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/customer_talk_service.proto

package customertalkpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on TalkInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TalkInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TalkInfoMultiError, or nil
// if none found.
func (m *TalkInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TalkId

	// no validation rules for Status

	// no validation rules for Title

	// no validation rules for StartedAt

	// no validation rules for FinishedAt

	if len(errors) > 0 {
		return TalkInfoMultiError(errors)
	}

	return nil
}

// TalkInfoMultiError is an error wrapping multiple validation errors returned
// by TalkInfo.ValidateAll() if the designated constraints aren't met.
type TalkInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkInfoMultiError) AllErrors() []error { return m }

// TalkInfoValidationError is the validation error returned by
// TalkInfo.Validate if the designated constraints aren't met.
type TalkInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkInfoValidationError) ErrorName() string { return "TalkInfoValidationError" }

// Error satisfies the builtin error interface
func (e TalkInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkInfoValidationError{}

// Validate checks the field values on QueryTalksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryTalksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryTalksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryTalksRequestMultiError, or nil if none found.
func (m *QueryTalksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryTalksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryTalksRequestMultiError(errors)
	}

	return nil
}

// QueryTalksRequestMultiError is an error wrapping multiple validation errors
// returned by QueryTalksRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryTalksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryTalksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryTalksRequestMultiError) AllErrors() []error { return m }

// QueryTalksRequestValidationError is the validation error returned by
// QueryTalksRequest.Validate if the designated constraints aren't met.
type QueryTalksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryTalksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryTalksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryTalksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryTalksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryTalksRequestValidationError) ErrorName() string {
	return "QueryTalksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryTalksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryTalksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryTalksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryTalksRequestValidationError{}

// Validate checks the field values on QueryTalksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryTalksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryTalksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryTalksResponseMultiError, or nil if none found.
func (m *QueryTalksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryTalksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTalks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryTalksResponseValidationError{
						field:  fmt.Sprintf("Talks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryTalksResponseValidationError{
						field:  fmt.Sprintf("Talks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryTalksResponseValidationError{
					field:  fmt.Sprintf("Talks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryTalksResponseMultiError(errors)
	}

	return nil
}

// QueryTalksResponseMultiError is an error wrapping multiple validation errors
// returned by QueryTalksResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryTalksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryTalksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryTalksResponseMultiError) AllErrors() []error { return m }

// QueryTalksResponseValidationError is the validation error returned by
// QueryTalksResponse.Validate if the designated constraints aren't met.
type QueryTalksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryTalksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryTalksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryTalksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryTalksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryTalksResponseValidationError) ErrorName() string {
	return "QueryTalksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryTalksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryTalksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryTalksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryTalksResponseValidationError{}

// Validate checks the field values on TalkMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TalkMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TalkMessageMultiError, or
// nil if none found.
func (m *TalkMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for At

	// no validation rules for CustomerMessage

	switch m.Message.(type) {

	case *TalkMessage_Text:
		// no validation rules for Text

	case *TalkMessage_Image:
		// no validation rules for Image

	}

	if len(errors) > 0 {
		return TalkMessageMultiError(errors)
	}

	return nil
}

// TalkMessageMultiError is an error wrapping multiple validation errors
// returned by TalkMessage.ValidateAll() if the designated constraints aren't met.
type TalkMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkMessageMultiError) AllErrors() []error { return m }

// TalkMessageValidationError is the validation error returned by
// TalkMessage.Validate if the designated constraints aren't met.
type TalkMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkMessageValidationError) ErrorName() string { return "TalkMessageValidationError" }

// Error satisfies the builtin error interface
func (e TalkMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkMessageValidationError{}

// Validate checks the field values on TalkCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TalkCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TalkCreateRequestMultiError, or nil if none found.
func (m *TalkCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return TalkCreateRequestMultiError(errors)
	}

	return nil
}

// TalkCreateRequestMultiError is an error wrapping multiple validation errors
// returned by TalkCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type TalkCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkCreateRequestMultiError) AllErrors() []error { return m }

// TalkCreateRequestValidationError is the validation error returned by
// TalkCreateRequest.Validate if the designated constraints aren't met.
type TalkCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkCreateRequestValidationError) ErrorName() string {
	return "TalkCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TalkCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkCreateRequestValidationError{}

// Validate checks the field values on TalkOpenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TalkOpenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkOpenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TalkOpenRequestMultiError, or nil if none found.
func (m *TalkOpenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkOpenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TalkId

	if len(errors) > 0 {
		return TalkOpenRequestMultiError(errors)
	}

	return nil
}

// TalkOpenRequestMultiError is an error wrapping multiple validation errors
// returned by TalkOpenRequest.ValidateAll() if the designated constraints
// aren't met.
type TalkOpenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkOpenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkOpenRequestMultiError) AllErrors() []error { return m }

// TalkOpenRequestValidationError is the validation error returned by
// TalkOpenRequest.Validate if the designated constraints aren't met.
type TalkOpenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkOpenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkOpenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkOpenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkOpenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkOpenRequestValidationError) ErrorName() string { return "TalkOpenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TalkOpenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkOpenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkOpenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkOpenRequestValidationError{}

// Validate checks the field values on TalkRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TalkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TalkRequestMultiError, or
// nil if none found.
func (m *TalkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Talk.(type) {

	case *TalkRequest_Create:

		if all {
			switch v := interface{}(m.GetCreate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TalkRequestValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TalkRequestValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TalkRequestValidationError{
					field:  "Create",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TalkRequest_Open:

		if all {
			switch v := interface{}(m.GetOpen()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TalkRequestValidationError{
						field:  "Open",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TalkRequestValidationError{
						field:  "Open",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpen()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TalkRequestValidationError{
					field:  "Open",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TalkRequest_Message:

		if all {
			switch v := interface{}(m.GetMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TalkRequestValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TalkRequestValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TalkRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TalkRequestMultiError(errors)
	}

	return nil
}

// TalkRequestMultiError is an error wrapping multiple validation errors
// returned by TalkRequest.ValidateAll() if the designated constraints aren't met.
type TalkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkRequestMultiError) AllErrors() []error { return m }

// TalkRequestValidationError is the validation error returned by
// TalkRequest.Validate if the designated constraints aren't met.
type TalkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkRequestValidationError) ErrorName() string { return "TalkRequestValidationError" }

// Error satisfies the builtin error interface
func (e TalkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkRequestValidationError{}

// Validate checks the field values on TalkMessages with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TalkMessages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkMessages with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TalkMessagesMultiError, or
// nil if none found.
func (m *TalkMessages) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkMessages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TalkMessagesValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TalkMessagesValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TalkMessagesValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TalkMessagesMultiError(errors)
	}

	return nil
}

// TalkMessagesMultiError is an error wrapping multiple validation errors
// returned by TalkMessages.ValidateAll() if the designated constraints aren't met.
type TalkMessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkMessagesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkMessagesMultiError) AllErrors() []error { return m }

// TalkMessagesValidationError is the validation error returned by
// TalkMessages.Validate if the designated constraints aren't met.
type TalkMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkMessagesValidationError) ErrorName() string { return "TalkMessagesValidationError" }

// Error satisfies the builtin error interface
func (e TalkMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkMessagesValidationError{}

// Validate checks the field values on TalkMessageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TalkMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkMessageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TalkMessageReplyMultiError, or nil if none found.
func (m *TalkMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TalkMessageReplyMultiError(errors)
	}

	return nil
}

// TalkMessageReplyMultiError is an error wrapping multiple validation errors
// returned by TalkMessageReply.ValidateAll() if the designated constraints
// aren't met.
type TalkMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkMessageReplyMultiError) AllErrors() []error { return m }

// TalkMessageReplyValidationError is the validation error returned by
// TalkMessageReply.Validate if the designated constraints aren't met.
type TalkMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkMessageReplyValidationError) ErrorName() string { return "TalkMessageReplyValidationError" }

// Error satisfies the builtin error interface
func (e TalkMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkMessageReplyValidationError{}

// Validate checks the field values on TalkResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TalkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TalkResponseMultiError, or
// nil if none found.
func (m *TalkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Talk.(type) {

	case *TalkResponse_Messages:

		if all {
			switch v := interface{}(m.GetMessages()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TalkResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TalkResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessages()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TalkResponseValidationError{
					field:  "Messages",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TalkResponse_Message:

		if all {
			switch v := interface{}(m.GetMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TalkResponseValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TalkResponseValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TalkResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TalkResponse_Reply:

		if all {
			switch v := interface{}(m.GetReply()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TalkResponseValidationError{
						field:  "Reply",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TalkResponseValidationError{
						field:  "Reply",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TalkResponseValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TalkResponseMultiError(errors)
	}

	return nil
}

// TalkResponseMultiError is an error wrapping multiple validation errors
// returned by TalkResponse.ValidateAll() if the designated constraints aren't met.
type TalkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkResponseMultiError) AllErrors() []error { return m }

// TalkResponseValidationError is the validation error returned by
// TalkResponse.Validate if the designated constraints aren't met.
type TalkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkResponseValidationError) ErrorName() string { return "TalkResponseValidationError" }

// Error satisfies the builtin error interface
func (e TalkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkResponseValidationError{}
